
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\004\004\000\002\005\005\000\002\005\003" +
    "\000\002\006\003\000\002\006\006\000\002\006\010\000" +
    "\002\006\013\000\002\006\011\000\002\006\003\000\002" +
    "\006\006\000\002\006\010\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\010\000\002\013\006\000\002\014\006\000\002\015" +
    "\003\000\002\015\005\000\002\016\005\000\002\016\004" +
    "\000\002\021\005\000\002\021\007\000\002\017\005\000" +
    "\002\017\004\000\002\017\003\000\002\022\003\000\002" +
    "\022\005\000\002\020\005\000\002\020\004\000\002\023" +
    "\003\000\002\023\005\000\002\063\006\000\002\064\003" +
    "\000\002\064\004\000\002\065\006\000\002\065\004\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\004\000\002\024\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\004\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\027\003\000\002\027\002\000\002\030\004" +
    "\000\002\030\002\000\002\031\004\000\002\031\006\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\004\000\002\034\010\000\002\035" +
    "\006\000\002\007\011\000\002\036\004\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\004\000\002\033" +
    "\006\000\002\040\005\000\002\041\005\000\002\042\005" +
    "\000\002\043\004\000\002\043\005\000\002\045\004\000" +
    "\002\045\005\000\002\044\013\000\002\052\010\000\002" +
    "\050\003\000\002\050\004\000\002\047\003\000\002\047" +
    "\002\000\002\046\004\000\002\046\002\000\002\053\011" +
    "\000\002\051\013\000\002\075\004\000\002\067\004\000" +
    "\002\067\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\004\000\002\070\010" +
    "\000\002\072\003\000\002\072\004\000\002\071\003\000" +
    "\002\071\002\000\002\073\004\000\002\073\002\000\002" +
    "\074\013\000\002\062\003\000\002\062\005\000\002\061" +
    "\003\000\002\061\002\000\002\060\003\000\002\060\005" +
    "\000\002\057\003\000\002\057\002\000\002\055\006\000" +
    "\002\054\014\000\002\054\013\000\002\056\004\000\002" +
    "\056\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\036\041\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\052\uffad\061\uffad\062\uffad\063\uffad" +
    "\066\uffad\100\uffad\103\uffad\001\002\000\004\002\u0131\001" +
    "\002\000\036\041\035\043\036\044\025\045\014\046\024" +
    "\047\033\050\027\052\030\061\011\062\010\063\013\066" +
    "\031\100\020\103\022\001\002\000\056\041\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\052\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\061\uffae\062\uffae\063\uffae" +
    "\066\uffae\067\uffae\073\uffae\075\uffae\076\uffae\100\uffae\103" +
    "\uffae\001\002\000\032\004\ufff3\016\ufff3\021\ufff3\041\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\100" +
    "\ufff3\103\ufff3\001\002\000\024\041\035\043\036\044\025" +
    "\045\014\046\024\047\033\050\027\100\u0121\103\022\001" +
    "\002\000\004\100\u0117\001\002\000\056\041\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\052\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\066\uffa7\067\uffa7\073\uffa7\075\uffa7\076\uffa7\100\uffa7\103" +
    "\uffa7\001\002\000\024\041\035\043\036\044\025\045\014" +
    "\046\024\047\033\050\027\100\020\103\022\001\002\000" +
    "\032\004\ufff0\016\ufff0\021\ufff0\041\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\100\ufff0\103\ufff0\001" +
    "\002\000\004\100\u0113\001\002\000\032\004\ufff1\016\ufff1" +
    "\021\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\100\ufff1\103\ufff1\001\002\000\056\041\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\052" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\066\uffa8\067\uffa8\073\uffa8\075\uffa8\076\uffa8\100" +
    "\uffa8\103\uffa8\001\002\000\032\004\uffec\016\uffec\021\uffec" +
    "\041\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\100\uffec\103\uffec\001\002\000\004\002\001\001\002" +
    "\000\032\004\uffeb\016\uffeb\021\uffeb\041\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\100\uffeb\103\uffeb" +
    "\001\002\000\032\004\ufff2\016\ufff2\021\ufff2\041\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\100\ufff2" +
    "\103\ufff2\001\002\000\004\020\u010e\001\002\000\032\004" +
    "\uffed\016\uffed\021\uffed\041\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\100\uffed\103\uffed\001\002\000" +
    "\056\041\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\052\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\066\uffa9\067\uffa9\073\uffa9\075\uffa9" +
    "\076\uffa9\100\uffa9\103\uffa9\001\002\000\004\020\u010b\001" +
    "\002\000\004\027\u0107\001\002\000\004\100\234\001\002" +
    "\000\006\004\045\005\044\001\002\000\004\020\037\001" +
    "\002\000\056\041\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\052\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\066\uffaa\067\uffaa\073\uffaa" +
    "\075\uffaa\076\uffaa\100\uffaa\103\uffaa\001\002\000\032\004" +
    "\uffef\016\uffef\021\uffef\041\uffef\043\uffef\044\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\100\uffef\103\uffef\001\002\000" +
    "\032\004\uffee\016\uffee\021\uffee\041\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\050\uffee\100\uffee\103\uffee\001" +
    "\002\000\026\041\035\043\036\044\025\045\014\046\024" +
    "\047\033\050\027\051\040\100\020\103\022\001\002\000" +
    "\006\016\uffe9\021\uffe9\001\002\000\004\021\043\001\002" +
    "\000\006\016\uffea\021\uffea\001\002\000\032\004\uffe7\016" +
    "\uffe7\021\uffe7\041\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\100\uffe7\103\uffe7\001\002\000\032\006" +
    "\074\010\072\023\071\025\057\027\060\031\053\037\052" +
    "\042\062\045\051\100\055\101\066\102\063\001\002\000" +
    "\056\041\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac\061" +
    "\uffac\062\uffac\063\uffac\066\uffac\067\uffac\073\uffac\075\uffac" +
    "\076\uffac\100\uffac\103\uffac\001\002\000\070\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\232\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\026\ufffc\030\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\040\ufffc\053\ufffc\060\ufffc\001" +
    "\002\000\032\006\074\010\072\023\071\025\057\027\222" +
    "\031\053\037\052\042\062\045\051\100\055\101\066\102" +
    "\063\001\002\000\064\004\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\030\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\053" +
    "\uffb2\060\uffb2\001\002\000\064\004\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3" +
    "\030\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\040" +
    "\uffb3\053\uffb3\060\uffb3\001\002\000\032\006\074\010\072" +
    "\023\071\025\057\027\060\031\053\037\052\042\062\045" +
    "\051\100\055\101\066\102\063\001\002\000\034\006\074" +
    "\010\072\023\071\025\057\027\060\031\053\032\213\037" +
    "\052\042\062\045\051\100\055\101\066\102\063\001\002" +
    "\000\032\006\uffd5\010\uffd5\023\071\025\uffd5\027\uffd5\031" +
    "\uffd5\037\uffd5\042\uffd5\045\uffd5\100\uffd5\101\uffd5\102\uffd5" +
    "\001\002\000\074\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\166\026\ufffb\030\ufffb\031\165\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\040\ufffb\053\ufffb\060\ufffb\001\002\000" +
    "\072\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\026\ufff6\030\ufff6" +
    "\031\155\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\040" +
    "\ufff6\053\ufff6\060\ufff6\001\002\000\034\006\074\010\072" +
    "\023\071\025\057\026\143\027\060\031\053\037\052\042" +
    "\062\045\051\100\055\101\066\102\063\001\002\000\034" +
    "\006\074\010\072\023\071\025\057\027\060\030\135\031" +
    "\053\037\052\042\062\045\051\100\055\101\066\102\063" +
    "\001\002\000\064\004\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\030\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\040\uffb9\053\uffb9" +
    "\060\uffb9\001\002\000\064\004\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\030" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6" +
    "\053\uffb6\060\uffb6\001\002\000\064\004\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\026" +
    "\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\040\uffdd\053\uffdd\060\uffdd\001\002\000\054\004\uffe5\006" +
    "\122\007\100\010\115\011\112\012\113\013\116\014\121" +
    "\016\133\020\077\021\106\022\120\023\114\024\110\033" +
    "\111\034\117\035\076\036\102\040\101\053\103\060\105" +
    "\001\002\000\064\004\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\030\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\040\uffba\053\uffba" +
    "\060\uffba\001\002\000\064\004\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\030" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4" +
    "\053\uffb4\060\uffb4\001\002\000\004\004\132\001\002\000" +
    "\064\004\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\026\uffb7\030\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\040\uffb7\053\uffb7\060\uffb7\001" +
    "\002\000\032\006\074\010\072\023\071\025\057\027\060" +
    "\031\053\037\052\042\062\045\051\100\055\101\066\102" +
    "\063\001\002\000\032\006\074\010\072\023\071\025\057" +
    "\027\060\031\053\037\052\042\062\045\051\100\055\101" +
    "\066\102\063\001\002\000\064\004\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8" +
    "\030\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040" +
    "\uffb8\053\uffb8\060\uffb8\001\002\000\064\004\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\026\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\040\uffb1\053\uffb1\060\uffb1\001\002\000\064\004\uffb5" +
    "\006\122\007\uffb5\010\uffb5\011\112\012\113\013\116\014" +
    "\121\015\uffb5\016\uffb5\020\077\021\106\022\120\023\114" +
    "\024\110\026\uffb5\030\uffb5\032\uffb5\033\111\034\117\035" +
    "\076\036\uffb5\040\101\053\103\060\105\001\002\000\032" +
    "\006\uffcc\010\uffcc\023\uffcc\025\uffcc\027\uffcc\031\uffcc\037" +
    "\uffcc\042\uffcc\045\uffcc\100\uffcc\101\uffcc\102\uffcc\001\002" +
    "\000\032\006\uffc8\010\uffc8\023\uffc8\025\uffc8\027\uffc8\031" +
    "\uffc8\037\uffc8\042\uffc8\045\uffc8\100\uffc8\101\uffc8\102\uffc8" +
    "\001\002\000\032\006\uffd1\010\uffd1\023\uffd1\025\uffd1\027" +
    "\uffd1\031\uffd1\037\uffd1\042\uffd1\045\uffd1\100\uffd1\101\uffd1" +
    "\102\uffd1\001\002\000\032\006\uffc4\010\uffc4\023\uffc4\025" +
    "\uffc4\027\uffc4\031\uffc4\037\uffc4\042\uffc4\045\uffc4\100\uffc4" +
    "\101\uffc4\102\uffc4\001\002\000\032\006\uffcb\010\uffcb\023" +
    "\uffcb\025\uffcb\027\uffcb\031\uffcb\037\uffcb\042\uffcb\045\uffcb" +
    "\100\uffcb\101\uffcb\102\uffcb\001\002\000\032\006\074\010" +
    "\072\023\071\025\057\027\060\031\053\037\052\042\062" +
    "\045\051\100\055\101\066\102\063\001\002\000\032\006" +
    "\074\010\072\023\071\025\057\027\060\031\053\037\052" +
    "\042\062\045\051\100\055\101\066\102\063\001\002\000" +
    "\032\006\074\010\072\023\071\025\057\027\060\031\053" +
    "\037\052\042\062\045\051\100\055\101\066\102\063\001" +
    "\002\000\032\006\uffc7\010\uffc7\023\uffc7\025\uffc7\027\uffc7" +
    "\031\uffc7\037\uffc7\042\uffc7\045\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\001\002\000\032\006\074\010\072\023\071\025\057" +
    "\027\060\031\053\037\052\042\062\045\051\100\055\101" +
    "\066\102\063\001\002\000\032\006\uffc3\010\uffc3\023\uffc3" +
    "\025\uffc3\027\uffc3\031\uffc3\037\uffc3\042\uffc3\045\uffc3\100" +
    "\uffc3\101\uffc3\102\uffc3\001\002\000\032\006\uffc6\010\uffc6" +
    "\023\uffc6\025\uffc6\027\uffc6\031\uffc6\037\uffc6\042\uffc6\045" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000\032\006\uffcf" +
    "\010\uffcf\023\uffcf\025\uffcf\027\uffcf\031\uffcf\037\uffcf\042" +
    "\uffcf\045\uffcf\100\uffcf\101\uffcf\102\uffcf\001\002\000\032" +
    "\006\uffce\010\uffce\023\uffce\025\uffce\027\uffce\031\uffce\037" +
    "\uffce\042\uffce\045\uffce\100\uffce\101\uffce\102\uffce\001\002" +
    "\000\032\006\uffc2\010\uffc2\023\uffc2\025\uffc2\027\uffc2\031" +
    "\uffc2\037\uffc2\042\uffc2\045\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\001\002\000\032\006\uffd0\010\uffd0\023\uffd0\025\uffd0\027" +
    "\uffd0\031\uffd0\037\uffd0\042\uffd0\045\uffd0\100\uffd0\101\uffd0" +
    "\102\uffd0\001\002\000\032\006\uffc9\010\uffc9\023\uffc9\025" +
    "\uffc9\027\uffc9\031\uffc9\037\uffc9\042\uffc9\045\uffc9\100\uffc9" +
    "\101\uffc9\102\uffc9\001\002\000\032\006\uffc5\010\uffc5\023" +
    "\uffc5\025\uffc5\027\uffc5\031\uffc5\037\uffc5\042\uffc5\045\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\001\002\000\032\006\uffc1\010" +
    "\uffc1\023\uffc1\025\uffc1\027\uffc1\031\uffc1\037\uffc1\042\uffc1" +
    "\045\uffc1\100\uffc1\101\uffc1\102\uffc1\001\002\000\032\006" +
    "\uffcd\010\uffcd\023\uffcd\025\uffcd\027\uffcd\031\uffcd\037\uffcd" +
    "\042\uffcd\045\uffcd\100\uffcd\101\uffcd\102\uffcd\001\002\000" +
    "\032\006\uffca\010\uffca\023\uffca\025\uffca\027\uffca\031\uffca" +
    "\037\uffca\042\uffca\045\uffca\100\uffca\101\uffca\102\uffca\001" +
    "\002\000\064\004\uffc0\006\122\007\100\010\115\011\112" +
    "\012\113\013\116\014\121\015\uffc0\016\uffc0\020\077\021" +
    "\106\022\120\023\114\024\110\026\uffc0\030\uffc0\032\uffc0" +
    "\033\111\034\117\035\076\036\102\040\101\053\103\060" +
    "\105\001\002\000\064\004\uffbe\006\122\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\116\014\121\015\uffbe\016\uffbe\020" +
    "\077\021\106\022\uffbe\023\uffbe\024\uffbe\026\uffbe\030\uffbe" +
    "\032\uffbe\033\111\034\117\035\uffbe\036\uffbe\040\101\053" +
    "\103\060\uffbe\001\002\000\064\004\uffbf\006\122\007\100" +
    "\010\115\011\112\012\113\013\116\014\121\015\uffbf\016" +
    "\uffbf\020\077\021\106\022\120\023\114\024\110\026\uffbf" +
    "\030\uffbf\032\uffbf\033\111\034\117\035\076\036\102\040" +
    "\101\053\103\060\105\001\002\000\064\004\uffbd\006\122" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\116\014\121\015" +
    "\uffbd\016\uffbd\020\077\021\106\022\uffbd\023\uffbd\024\uffbd" +
    "\026\uffbd\030\uffbd\032\uffbd\033\111\034\117\035\uffbd\036" +
    "\uffbd\040\101\053\103\060\uffbd\001\002\000\050\006\122" +
    "\007\100\010\115\011\112\012\113\013\116\014\121\020" +
    "\077\021\106\022\120\023\130\024\110\033\111\034\117" +
    "\035\076\036\102\040\101\053\103\060\105\001\002\000" +
    "\034\006\uffc2\010\uffc2\013\131\023\uffc2\025\uffc2\027\uffc2" +
    "\031\uffc2\037\uffc2\042\uffc2\045\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\001\002\000\032\006\uffd6\010\uffd6\023\uffd6\025\uffd6" +
    "\027\uffd6\031\uffd6\037\uffd6\042\uffd6\045\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\001\002\000\056\041\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\052\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\061\uffab\062\uffab\063\uffab\066\uffab" +
    "\067\uffab\073\uffab\075\uffab\076\uffab\100\uffab\103\uffab\001" +
    "\002\000\032\006\074\010\072\023\071\025\057\027\060" +
    "\031\053\037\052\042\062\045\051\100\055\101\066\102" +
    "\063\001\002\000\004\004\uffe4\001\002\000\064\004\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\026\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\040\uffd9\053\uffd9\060\uffd9\001\002\000\054" +
    "\006\122\007\100\010\115\011\112\012\113\013\116\014" +
    "\121\016\141\020\077\021\106\022\120\023\114\024\110" +
    "\030\uffd8\033\111\034\117\035\076\036\102\040\101\053" +
    "\103\060\105\001\002\000\004\030\140\001\002\000\064" +
    "\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\026\uffda\030\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\040\uffda\053\uffda\060\uffda\001\002" +
    "\000\032\006\074\010\072\023\071\025\057\027\060\031" +
    "\053\037\052\042\062\045\051\100\055\101\066\102\063" +
    "\001\002\000\004\030\uffd7\001\002\000\064\004\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\026\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\040\uffe2\053\uffe2\060\uffe2\001\002\000\004\026" +
    "\154\001\002\000\054\006\122\007\100\010\115\011\112" +
    "\012\113\013\116\014\121\015\147\020\077\021\106\022" +
    "\120\023\114\024\110\026\146\033\111\034\117\035\076" +
    "\036\102\040\101\053\103\060\105\001\002\000\064\004" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\026\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\040\uffbb\053\uffbb\060\uffbb\001\002\000" +
    "\032\006\074\010\072\023\071\025\057\027\060\031\053" +
    "\037\052\042\062\045\051\100\055\101\066\102\063\001" +
    "\002\000\054\006\122\007\100\010\115\011\112\012\113" +
    "\013\116\014\121\016\151\020\077\021\106\022\120\023" +
    "\114\024\110\026\uffe1\033\111\034\117\035\076\036\102" +
    "\040\101\053\103\060\105\001\002\000\032\006\074\010" +
    "\072\023\071\025\057\027\060\031\053\037\052\042\062" +
    "\045\051\100\055\101\066\102\063\001\002\000\004\026" +
    "\uffe0\001\002\000\052\006\122\007\100\010\115\011\112" +
    "\012\113\013\116\014\121\015\147\020\077\021\106\022" +
    "\120\023\114\024\110\033\111\034\117\035\076\036\102" +
    "\040\101\053\103\060\105\001\002\000\064\004\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\026\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\040\uffe3\053\uffe3\060\uffe3\001\002\000\034\006" +
    "\074\010\072\015\uffaf\023\071\025\057\027\060\031\053" +
    "\037\052\042\062\045\051\100\055\101\066\102\063\001" +
    "\002\000\004\015\161\001\002\000\054\006\122\007\100" +
    "\010\115\011\112\012\113\013\116\014\121\015\uffb0\020" +
    "\077\021\106\022\120\023\114\024\110\032\160\033\111" +
    "\034\117\035\076\036\102\040\101\053\103\060\105\001" +
    "\002\000\070\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\026\ufff5" +
    "\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\040" +
    "\ufff5\053\ufff5\060\ufff5\001\002\000\034\006\074\010\072" +
    "\023\071\025\057\027\060\031\053\032\uffaf\037\052\042" +
    "\062\045\051\100\055\101\066\102\063\001\002\000\004" +
    "\032\164\001\002\000\052\006\122\007\100\010\115\011" +
    "\112\012\113\013\116\014\121\020\077\021\106\022\120" +
    "\023\114\024\110\032\uffb0\033\111\034\117\035\076\036" +
    "\102\040\101\053\103\060\105\001\002\000\070\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\026\ufff4\030\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\040\ufff4\053\ufff4\060\ufff4" +
    "\001\002\000\034\006\074\010\072\015\uffaf\023\071\025" +
    "\057\027\060\031\053\037\052\042\062\045\051\100\055" +
    "\101\066\102\063\001\002\000\034\006\074\010\072\023" +
    "\071\025\057\026\uff6b\027\060\031\053\037\052\042\062" +
    "\045\051\100\055\101\066\102\063\001\002\000\004\026" +
    "\174\001\002\000\054\006\122\007\100\010\115\011\112" +
    "\012\113\013\116\014\121\016\172\020\077\021\106\022" +
    "\120\023\114\024\110\026\uff6e\033\111\034\117\035\076" +
    "\036\102\040\101\053\103\060\105\001\002\000\004\026" +
    "\uff6c\001\002\000\032\006\074\010\072\023\071\025\057" +
    "\027\060\031\053\037\052\042\062\045\051\100\055\101" +
    "\066\102\063\001\002\000\004\026\uff6d\001\002\000\072" +
    "\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a" +
    "\021\uff6a\022\uff6a\023\uff6a\024\uff6a\026\uff6a\030\uff6a\031" +
    "\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\040\uff6a" +
    "\053\uff6a\060\uff6a\001\002\000\004\015\207\001\002\000" +
    "\054\006\122\007\100\010\115\011\112\012\113\013\116" +
    "\014\121\015\uffb0\020\077\021\106\022\120\023\114\024" +
    "\110\032\177\033\111\034\117\035\076\036\102\040\101" +
    "\053\103\060\105\001\002\000\072\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\026\ufffa\030\ufffa\031\200\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\040\ufffa\053\ufffa\060\ufffa\001" +
    "\002\000\034\006\074\010\072\015\uffaf\023\071\025\057" +
    "\027\060\031\053\037\052\042\062\045\051\100\055\101" +
    "\066\102\063\001\002\000\004\015\204\001\002\000\054" +
    "\006\122\007\100\010\115\011\112\012\113\013\116\014" +
    "\121\015\uffb0\020\077\021\106\022\120\023\114\024\110" +
    "\032\203\033\111\034\117\035\076\036\102\040\101\053" +
    "\103\060\105\001\002\000\070\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\026\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\040\ufff7\053\ufff7\060\ufff7\001\002\000\034" +
    "\006\074\010\072\023\071\025\057\027\060\031\053\032" +
    "\uffaf\037\052\042\062\045\051\100\055\101\066\102\063" +
    "\001\002\000\004\032\206\001\002\000\070\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\026\ufff8\030\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\040\ufff8\053\ufff8\060\ufff8\001" +
    "\002\000\034\006\074\010\072\023\071\025\057\027\060" +
    "\031\053\032\uffaf\037\052\042\062\045\051\100\055\101" +
    "\066\102\063\001\002\000\004\032\211\001\002\000\070" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\030\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\040\ufff9\053\ufff9" +
    "\060\ufff9\001\002\000\032\006\uffd4\010\uffd4\023\uffd4\025" +
    "\uffd4\027\uffd4\031\uffd4\037\uffd4\042\uffd4\045\uffd4\100\uffd4" +
    "\101\uffd4\102\uffd4\001\002\000\064\004\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026" +
    "\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\040\uffde\053\uffde\060\uffde\001\002\000\004\032\220\001" +
    "\002\000\054\006\122\007\100\010\115\011\112\012\113" +
    "\013\116\014\121\016\216\020\077\021\106\022\120\023" +
    "\114\024\110\032\uffdc\033\111\034\117\035\076\036\102" +
    "\040\101\053\103\060\105\001\002\000\032\006\074\010" +
    "\072\023\071\025\057\027\060\031\053\037\052\042\062" +
    "\045\051\100\055\101\066\102\063\001\002\000\004\032" +
    "\uffdb\001\002\000\064\004\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf\030\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\040\uffdf\053" +
    "\uffdf\060\uffdf\001\002\000\050\004\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\116\014\uffbc\015\uffbc\016\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\026\uffbc\030\uffbc\032\uffbc\035\uffbc" +
    "\036\uffbc\053\uffbc\060\uffbc\001\002\000\036\006\074\010" +
    "\072\023\071\025\057\027\060\030\135\031\053\037\052" +
    "\042\062\045\051\056\224\100\055\101\066\102\063\001" +
    "\002\000\064\004\uffd2\006\122\007\100\010\115\011\112" +
    "\012\113\013\116\014\121\015\uffd2\016\uffd2\020\077\021" +
    "\106\022\120\023\114\024\110\026\uffd2\030\uffd2\032\uffd2" +
    "\033\111\034\117\035\076\036\102\040\101\053\103\060" +
    "\105\001\002\000\034\004\227\006\074\010\072\023\071" +
    "\025\057\027\060\031\053\037\052\042\062\045\051\100" +
    "\055\101\066\102\063\001\002\000\004\030\226\001\002" +
    "\000\064\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\026\uffd3\030\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\053\uffd3\060\uffd3" +
    "\001\002\000\040\030\uff91\054\uff91\055\uff91\056\uff91\057" +
    "\uff91\064\uff91\067\uff91\070\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\001\002\000\052\004" +
    "\231\006\122\007\100\010\115\011\112\012\113\013\116" +
    "\014\121\020\077\021\106\022\120\023\114\024\110\033" +
    "\111\034\117\035\076\036\102\040\101\053\103\060\105" +
    "\001\002\000\040\030\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\064\uff90\067\uff90\070\uff90\072\uff90\073\uff90\074\uff90" +
    "\075\uff90\076\uff90\077\uff90\100\uff90\001\002\000\004\100" +
    "\055\001\002\000\066\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026\ufffd" +
    "\030\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\040" +
    "\ufffd\053\ufffd\060\ufffd\001\002\000\004\005\235\001\002" +
    "\000\004\027\236\001\002\000\052\041\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\054\uffad\055\uffad" +
    "\056\uffad\061\uffad\062\uffad\063\uffad\066\uffad\067\uffad\073" +
    "\uffad\075\uffad\076\uffad\100\uffad\103\uffad\001\002\000\004" +
    "\030\u0105\001\002\000\052\041\035\043\036\044\025\045" +
    "\014\046\024\047\033\050\027\054\254\055\262\056\224" +
    "\061\011\062\010\063\013\066\031\067\250\073\247\075" +
    "\255\076\241\100\263\103\022\001\002\000\004\025\375" +
    "\001\002\000\034\030\uffa0\054\uffa0\055\uffa0\056\uffa0\064" +
    "\uffa0\067\uffa0\070\uffa0\072\uffa0\073\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\100\uffa0\001\002\000\004\005\372\001\002\000" +
    "\034\030\uff99\054\uff99\055\uff99\056\uff99\064\uff99\067\uff99" +
    "\070\uff99\072\uff99\073\uff99\075\uff99\076\uff99\077\uff99\100" +
    "\uff99\001\002\000\034\030\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\064\uff9a\067\uff9a\070\uff9a\072\uff9a\073\uff9a\075\uff9a\076" +
    "\uff9a\077\uff9a\100\uff9a\001\002\000\034\030\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\064\uff9c\067\uff9c\070\uff9c\072\uff9c\073" +
    "\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\001\002\000\050" +
    "\041\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\061\uffad\062\uffad" +
    "\063\uffad\066\uffad\067\uffad\075\uffad\100\uffad\103\uffad\001" +
    "\002\000\004\025\345\001\002\000\034\030\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\064\uff9e\067\uff9e\070\uff9e\072\uff9e\073" +
    "\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\001\002\000\014" +
    "\030\ufffe\064\ufffe\070\ufffe\072\ufffe\077\ufffe\001\002\000" +
    "\034\030\uff9d\054\uff9d\055\uff9d\056\uff9d\064\uff9d\067\uff9d" +
    "\070\uff9d\072\uff9d\073\uff9d\075\uff9d\076\uff9d\077\uff9d\100" +
    "\uff9d\001\002\000\004\100\055\001\002\000\004\025\270" +
    "\001\002\000\034\030\uff9f\054\uff9f\055\uff9f\056\uff9f\064" +
    "\uff9f\067\uff9f\070\uff9f\072\uff9f\073\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\100\uff9f\001\002\000\012\004\267\005\ufff6\017" +
    "\ufff6\031\155\001\002\000\034\030\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\064\uff9b\067\uff9b\070\uff9b\072\uff9b\073\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\001\002\000\034\030\uffa1" +
    "\054\254\055\262\056\224\064\uffa1\067\250\070\uffa1\072" +
    "\uffa1\073\247\075\255\076\241\077\uffa1\100\055\001\002" +
    "\000\032\006\074\010\072\023\071\025\057\027\060\031" +
    "\053\037\052\042\062\045\051\100\055\101\066\102\063" +
    "\001\002\000\014\005\ufffb\017\ufffb\025\166\031\165\100" +
    "\uffec\001\002\000\052\004\265\006\122\007\100\010\115" +
    "\011\112\012\113\013\116\014\121\020\077\021\106\022" +
    "\120\023\114\024\110\033\111\034\117\035\076\036\102" +
    "\040\101\053\103\060\105\001\002\000\040\030\uff96\054" +
    "\uff96\055\uff96\056\uff96\057\uff96\064\uff96\067\uff96\070\uff96" +
    "\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100" +
    "\uff96\001\002\000\014\030\uffa2\064\uffa2\070\uffa2\072\uffa2" +
    "\077\uffa2\001\002\000\034\030\uff98\054\uff98\055\uff98\056" +
    "\uff98\064\uff98\067\uff98\070\uff98\072\uff98\073\uff98\075\uff98" +
    "\076\uff98\077\uff98\100\uff98\001\002\000\032\006\074\010" +
    "\072\023\071\025\057\027\060\031\053\037\052\042\062" +
    "\045\051\100\055\101\066\102\063\001\002\000\052\006" +
    "\122\007\100\010\115\011\112\012\113\013\116\014\121" +
    "\020\077\021\106\022\120\023\114\024\110\026\272\033" +
    "\111\034\117\035\076\036\102\040\101\053\103\060\105" +
    "\001\002\000\004\065\273\001\002\000\050\041\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\061\uffad\062\uffad\063\uffad\066" +
    "\uffad\067\uffad\075\uffad\100\uffad\103\uffad\001\002\000\004" +
    "\064\342\001\002\000\050\041\035\043\036\044\025\045" +
    "\014\046\024\047\033\050\027\054\254\055\262\056\224" +
    "\057\305\061\011\062\010\063\013\066\031\067\302\075" +
    "\255\100\263\103\022\001\002\000\032\054\254\055\262" +
    "\056\224\057\305\064\uff83\067\302\070\uff83\072\uff83\074" +
    "\uff83\075\255\077\uff83\100\055\001\002\000\032\054\uff7c" +
    "\055\uff7c\056\uff7c\057\uff7c\064\uff7c\067\uff7c\070\uff7c\072" +
    "\uff7c\074\uff7c\075\uff7c\077\uff7c\100\uff7c\001\002\000\032" +
    "\054\uff7d\055\uff7d\056\uff7d\057\uff7d\064\uff7d\067\uff7d\070" +
    "\uff7d\072\uff7d\074\uff7d\075\uff7d\077\uff7d\100\uff7d\001\002" +
    "\000\032\054\uff7f\055\uff7f\056\uff7f\057\uff7f\064\uff7f\067" +
    "\uff7f\070\uff7f\072\uff7f\074\uff7f\075\uff7f\077\uff7f\100\uff7f" +
    "\001\002\000\004\025\316\001\002\000\032\054\uff81\055" +
    "\uff81\056\uff81\057\uff81\064\uff81\067\uff81\070\uff81\072\uff81" +
    "\074\uff81\075\uff81\077\uff81\100\uff81\001\002\000\032\054" +
    "\uff82\055\uff82\056\uff82\057\uff82\064\uff82\067\uff82\070\uff82" +
    "\072\uff82\074\uff82\075\uff82\077\uff82\100\uff82\001\002\000" +
    "\006\004\314\101\313\001\002\000\012\004\312\005\ufff6" +
    "\017\ufff6\031\155\001\002\000\032\054\uff7e\055\uff7e\056" +
    "\uff7e\057\uff7e\064\uff7e\067\uff7e\070\uff7e\072\uff7e\074\uff7e" +
    "\075\uff7e\077\uff7e\100\uff7e\001\002\000\032\054\uff80\055" +
    "\uff80\056\uff80\057\uff80\064\uff80\067\uff80\070\uff80\072\uff80" +
    "\074\uff80\075\uff80\077\uff80\100\uff80\001\002\000\014\064" +
    "\uff85\070\uff85\072\uff85\074\uff85\077\uff85\001\002\000\032" +
    "\054\uff7b\055\uff7b\056\uff7b\057\uff7b\064\uff7b\067\uff7b\070" +
    "\uff7b\072\uff7b\074\uff7b\075\uff7b\077\uff7b\100\uff7b\001\002" +
    "\000\004\004\315\001\002\000\032\054\uff93\055\uff93\056" +
    "\uff93\057\uff93\064\uff93\067\uff93\070\uff93\072\uff93\074\uff93" +
    "\075\uff93\077\uff93\100\uff93\001\002\000\032\054\uff92\055" +
    "\uff92\056\uff92\057\uff92\064\uff92\067\uff92\070\uff92\072\uff92" +
    "\074\uff92\075\uff92\077\uff92\100\uff92\001\002\000\032\006" +
    "\074\010\072\023\071\025\057\027\060\031\053\037\052" +
    "\042\062\045\051\100\055\101\066\102\063\001\002\000" +
    "\052\006\122\007\100\010\115\011\112\012\113\013\116" +
    "\014\121\020\077\021\106\022\120\023\114\024\110\026" +
    "\320\033\111\034\117\035\076\036\102\040\101\053\103" +
    "\060\105\001\002\000\004\071\321\001\002\000\050\041" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\061\uffad\062\uffad\063" +
    "\uffad\066\uffad\067\uffad\075\uffad\100\uffad\103\uffad\001\002" +
    "\000\010\070\uff76\072\uff76\077\324\001\002\000\006\070" +
    "\uff74\072\336\001\002\000\004\025\330\001\002\000\010" +
    "\070\uff79\072\uff79\077\324\001\002\000\006\070\uff77\072" +
    "\uff77\001\002\000\006\070\uff78\072\uff78\001\002\000\032" +
    "\006\074\010\072\023\071\025\057\027\060\031\053\037" +
    "\052\042\062\045\051\100\055\101\066\102\063\001\002" +
    "\000\052\006\122\007\100\010\115\011\112\012\113\013" +
    "\116\014\121\020\077\021\106\022\120\023\114\024\110" +
    "\026\332\033\111\034\117\035\076\036\102\040\101\053" +
    "\103\060\105\001\002\000\004\071\333\001\002\000\050" +
    "\041\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\061\uffad\062\uffad" +
    "\063\uffad\066\uffad\067\uffad\075\uffad\100\uffad\103\uffad\001" +
    "\002\000\010\070\uff7a\072\uff7a\077\uff7a\001\002\000\004" +
    "\070\340\001\002\000\050\041\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\061\uffad\062\uffad\063\uffad\066\uffad\067\uffad\075" +
    "\uffad\100\uffad\103\uffad\001\002\000\004\070\uff75\001\002" +
    "\000\032\054\uff73\055\uff73\056\uff73\057\uff73\064\uff73\067" +
    "\uff73\070\uff73\072\uff73\074\uff73\075\uff73\077\uff73\100\uff73" +
    "\001\002\000\014\064\uff84\070\uff84\072\uff84\074\uff84\077" +
    "\uff84\001\002\000\040\030\uff87\054\uff87\055\uff87\056\uff87" +
    "\057\uff87\064\uff87\067\uff87\070\uff87\072\uff87\073\uff87\074" +
    "\uff87\075\uff87\076\uff87\077\uff87\100\uff87\001\002\000\004" +
    "\004\344\001\002\000\040\030\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\064\uff95\067\uff95\070\uff95\072\uff95\073\uff95" +
    "\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\001\002\000" +
    "\032\006\074\010\072\023\071\025\057\027\060\031\053" +
    "\037\052\042\062\045\051\100\055\101\066\102\063\001" +
    "\002\000\052\006\122\007\100\010\115\011\112\012\113" +
    "\013\116\014\121\020\077\021\106\022\120\023\114\024" +
    "\110\026\347\033\111\034\117\035\076\036\102\040\101" +
    "\053\103\060\105\001\002\000\004\071\350\001\002\000" +
    "\052\041\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\054\uffad\055\uffad\056\uffad\061\uffad\062\uffad\063" +
    "\uffad\066\uffad\067\uffad\073\uffad\075\uffad\076\uffad\100\uffad" +
    "\103\uffad\001\002\000\010\070\uff8a\072\uff8a\077\354\001" +
    "\002\000\006\070\uff88\072\364\001\002\000\006\070\uff8b" +
    "\072\uff8b\001\002\000\004\025\357\001\002\000\010\070" +
    "\uff8d\072\uff8d\077\354\001\002\000\006\070\uff8c\072\uff8c" +
    "\001\002\000\032\006\074\010\072\023\071\025\057\027" +
    "\060\031\053\037\052\042\062\045\051\100\055\101\066" +
    "\102\063\001\002\000\052\006\122\007\100\010\115\011" +
    "\112\012\113\013\116\014\121\020\077\021\106\022\120" +
    "\023\114\024\110\026\361\033\111\034\117\035\076\036" +
    "\102\040\101\053\103\060\105\001\002\000\004\071\362" +
    "\001\002\000\052\041\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\054\uffad\055\uffad\056\uffad\061\uffad" +
    "\062\uffad\063\uffad\066\uffad\067\uffad\073\uffad\075\uffad\076" +
    "\uffad\100\uffad\103\uffad\001\002\000\010\070\uff8e\072\uff8e" +
    "\077\uff8e\001\002\000\052\041\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\054\uffad\055\uffad\056\uffad" +
    "\061\uffad\062\uffad\063\uffad\066\uffad\067\uffad\073\uffad\075" +
    "\uffad\076\uffad\100\uffad\103\uffad\001\002\000\004\070\366" +
    "\001\002\000\034\030\uff8f\054\uff8f\055\uff8f\056\uff8f\064" +
    "\uff8f\067\uff8f\070\uff8f\072\uff8f\073\uff8f\075\uff8f\076\uff8f" +
    "\077\uff8f\100\uff8f\001\002\000\004\070\uff89\001\002\000" +
    "\004\074\371\001\002\000\034\030\uff94\054\uff94\055\uff94" +
    "\056\uff94\064\uff94\067\uff94\070\uff94\072\uff94\073\uff94\075" +
    "\uff94\076\uff94\077\uff94\100\uff94\001\002\000\032\006\074" +
    "\010\072\023\071\025\057\027\060\031\053\037\052\042" +
    "\062\045\051\100\055\101\066\102\063\001\002\000\004" +
    "\004\374\001\002\000\040\030\uff97\054\uff97\055\uff97\056" +
    "\uff97\057\uff97\064\uff97\067\uff97\070\uff97\072\uff97\073\uff97" +
    "\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\001\002\000" +
    "\032\006\074\010\072\023\071\025\057\027\060\031\053" +
    "\037\052\042\062\045\051\100\055\101\066\102\063\001" +
    "\002\000\050\006\122\007\100\010\115\011\112\012\113" +
    "\013\116\014\121\020\077\021\106\022\120\023\114\024" +
    "\110\033\111\034\117\035\076\036\102\040\101\053\377" +
    "\060\105\001\002\000\032\006\074\010\072\023\071\025" +
    "\057\027\060\031\053\037\052\042\062\045\051\100\055" +
    "\101\066\102\063\001\002\000\052\006\122\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\116\014\121\020\077\021\106" +
    "\022\uffbd\023\uffbd\024\uffbd\026\u0101\033\111\034\117\035" +
    "\uffbd\036\uffbd\040\101\053\103\060\uffbd\001\002\000\004" +
    "\065\u0102\001\002\000\052\041\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\054\uffad\055\uffad\056\uffad" +
    "\061\uffad\062\uffad\063\uffad\066\uffad\067\uffad\073\uffad\075" +
    "\uffad\076\uffad\100\uffad\103\uffad\001\002\000\004\064\u0104" +
    "\001\002\000\034\030\uff86\054\uff86\055\uff86\056\uff86\064" +
    "\uff86\067\uff86\070\uff86\072\uff86\073\uff86\075\uff86\076\uff86" +
    "\077\uff86\100\uff86\001\002\000\004\004\u0106\001\002\000" +
    "\056\041\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\052\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\066\uffa3\067\uffa3\073\uffa3\075\uffa3" +
    "\076\uffa3\100\uffa3\103\uffa3\001\002\000\052\041\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\054\uffad" +
    "\055\uffad\056\uffad\061\uffad\062\uffad\063\uffad\066\uffad\067" +
    "\uffad\073\uffad\075\uffad\076\uffad\100\uffad\103\uffad\001\002" +
    "\000\004\030\u0109\001\002\000\004\004\u010a\001\002\000" +
    "\004\002\uffff\001\002\000\024\041\035\043\036\044\025" +
    "\045\014\046\024\047\033\050\027\100\020\103\022\001" +
    "\002\000\004\021\u010d\001\002\000\032\004\uffe6\016\uffe6" +
    "\021\uffe6\041\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\100\uffe6\103\uffe6\001\002\000\026\041\035" +
    "\043\036\044\025\045\014\046\024\047\033\050\027\051" +
    "\040\100\020\103\022\001\002\000\004\016\u0110\001\002" +
    "\000\026\041\035\043\036\044\025\045\014\046\024\047" +
    "\033\050\027\051\040\100\020\103\022\001\002\000\004" +
    "\021\u0112\001\002\000\032\004\uffe8\016\uffe8\021\uffe8\041" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\100\uffe8\103\uffe8\001\002\000\014\004\uffa6\005\uffa6\016" +
    "\uffa6\026\uffa6\030\uffa6\001\002\000\024\041\035\043\036" +
    "\044\025\045\014\046\024\047\033\050\027\100\020\103" +
    "\022\001\002\000\004\004\u0116\001\002\000\056\041\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\052" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\066\uffa4\067\uffa4\073\uffa4\075\uffa4\076\uffa4\100" +
    "\uffa4\103\uffa4\001\002\000\004\027\u0118\001\002\000\026" +
    "\030\uff6f\041\035\043\036\044\025\045\014\046\024\047" +
    "\033\050\027\100\020\103\022\001\002\000\004\030\u011e" +
    "\001\002\000\010\016\u011c\026\uff72\030\uff72\001\002\000" +
    "\006\026\uff70\030\uff70\001\002\000\024\041\035\043\036" +
    "\044\025\045\014\046\024\047\033\050\027\100\020\103" +
    "\022\001\002\000\006\026\uff71\030\uff71\001\002\000\004" +
    "\004\u011f\001\002\000\056\041\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\061\uffa5\062\uffa5\063\uffa5\066\uffa5\067" +
    "\uffa5\073\uffa5\075\uffa5\076\uffa5\100\uffa5\103\uffa5\001\002" +
    "\000\004\100\u0129\001\002\000\006\025\u0122\100\uffec\001" +
    "\002\000\026\026\uff6f\041\035\043\036\044\025\045\014" +
    "\046\024\047\033\050\027\100\020\103\022\001\002\000" +
    "\004\026\u0124\001\002\000\004\027\u0125\001\002\000\052" +
    "\041\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\054\uffad\055\uffad\056\uffad\061\uffad\062\uffad\063\uffad" +
    "\066\uffad\067\uffad\073\uffad\075\uffad\076\uffad\100\uffad\103" +
    "\uffad\001\002\000\004\030\u0127\001\002\000\004\004\u0128" +
    "\001\002\000\056\041\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\047\uff68\050\uff68\052\uff68\054\uff68\055\uff68\056\uff68" +
    "\057\uff68\061\uff68\062\uff68\063\uff68\066\uff68\067\uff68\073" +
    "\uff68\075\uff68\076\uff68\100\uff68\103\uff68\001\002\000\004" +
    "\025\u012a\001\002\000\026\026\uff6f\041\035\043\036\044" +
    "\025\045\014\046\024\047\033\050\027\100\020\103\022" +
    "\001\002\000\004\026\u012c\001\002\000\004\027\u012d\001" +
    "\002\000\052\041\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\054\uffad\055\uffad\056\uffad\061\uffad\062" +
    "\uffad\063\uffad\066\uffad\067\uffad\073\uffad\075\uffad\076\uffad" +
    "\100\uffad\103\uffad\001\002\000\004\030\u012f\001\002\000" +
    "\004\004\u0130\001\002\000\056\041\uff69\043\uff69\044\uff69" +
    "\045\uff69\046\uff69\047\uff69\050\uff69\052\uff69\054\uff69\055" +
    "\uff69\056\uff69\057\uff69\061\uff69\062\uff69\063\uff69\066\uff69" +
    "\067\uff69\073\uff69\075\uff69\076\uff69\100\uff69\103\uff69\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\006\002\003\030\004\001\001\000\002\001" +
    "\001\000\030\003\020\007\011\010\014\012\006\013\022" +
    "\014\015\031\005\032\031\034\033\035\025\054\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\u011f" +
    "\012\006\013\022\014\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\u0113\012\006\013\022\014\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\041\011\040\012\006\013\022\014\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\047\006\045\015\066\016" +
    "\064\017\060\020\072\024\063\055\055\063\053\064\046" +
    "\065\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\047\006\045\016\064\017\060\020\072\024\222" +
    "\055\055\063\053\064\046\065\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\047\006\045\016\064" +
    "\017\060\020\072\024\220\055\055\063\053\064\046\065" +
    "\067\001\001\000\030\005\047\006\045\016\064\017\060" +
    "\020\072\022\213\024\214\055\055\063\053\064\046\065" +
    "\067\001\001\000\006\063\053\064\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\047\006\045\016" +
    "\064\017\060\020\072\021\143\024\144\055\055\063\053" +
    "\064\046\065\067\001\001\000\030\005\047\006\045\016" +
    "\064\017\060\020\072\023\136\024\135\055\055\063\053" +
    "\064\046\065\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\106\026\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\047\006\045\016\064\017\060" +
    "\020\072\024\126\055\055\063\053\064\046\065\067\001" +
    "\001\000\026\005\047\006\045\016\064\017\060\020\072" +
    "\024\074\055\055\063\053\064\046\065\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\106\026\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\047" +
    "\006\045\016\064\017\060\020\072\024\125\055\055\063" +
    "\053\064\046\065\067\001\001\000\026\005\047\006\045" +
    "\016\064\017\060\020\072\024\124\055\055\063\053\064" +
    "\046\065\067\001\001\000\026\005\047\006\045\016\064" +
    "\017\060\020\072\024\123\055\055\063\053\064\046\065" +
    "\067\001\001\000\002\001\001\000\026\005\047\006\045" +
    "\016\064\017\060\020\072\024\122\055\055\063\053\064" +
    "\046\065\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\106\026\103\001\001\000\006\025\106\026\103\001\001" +
    "\000\006\025\106\026\103\001\001\000\006\025\106\026" +
    "\103\001\001\000\006\025\106\026\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\047\006\045\015\133\016\064\017\060\020\072\024\063" +
    "\055\055\063\053\064\046\065\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\106\026\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\047\006" +
    "\045\016\064\017\060\020\072\023\141\024\135\055\055" +
    "\063\053\064\046\065\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\106\026\103" +
    "\001\001\000\002\001\001\000\026\005\047\006\045\016" +
    "\064\017\060\020\072\024\147\055\055\063\053\064\046" +
    "\065\067\001\001\000\006\025\106\026\103\001\001\000" +
    "\030\005\047\006\045\016\064\017\060\020\072\021\151" +
    "\024\152\055\055\063\053\064\046\065\067\001\001\000" +
    "\002\001\001\000\006\025\106\026\103\001\001\000\002" +
    "\001\001\000\030\005\047\006\045\016\064\017\060\020" +
    "\072\024\156\027\155\055\055\063\053\064\046\065\067" +
    "\001\001\000\002\001\001\000\006\025\106\026\103\001" +
    "\001\000\002\001\001\000\030\005\047\006\045\016\064" +
    "\017\060\020\072\024\162\027\161\055\055\063\053\064" +
    "\046\065\067\001\001\000\002\001\001\000\006\025\106" +
    "\026\103\001\001\000\002\001\001\000\030\005\047\006" +
    "\045\016\064\017\060\020\072\024\175\027\174\055\055" +
    "\063\053\064\046\065\067\001\001\000\032\005\047\006" +
    "\045\016\064\017\060\020\072\024\167\055\055\057\166" +
    "\060\170\063\053\064\046\065\067\001\001\000\002\001" +
    "\001\000\006\025\106\026\103\001\001\000\002\001\001" +
    "\000\030\005\047\006\045\016\064\017\060\020\072\024" +
    "\167\055\055\060\172\063\053\064\046\065\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\106\026\103\001\001\000\002\001\001\000\030" +
    "\005\047\006\045\016\064\017\060\020\072\024\201\027" +
    "\200\055\055\063\053\064\046\065\067\001\001\000\002" +
    "\001\001\000\006\025\106\026\103\001\001\000\002\001" +
    "\001\000\030\005\047\006\045\016\064\017\060\020\072" +
    "\024\162\027\204\055\055\063\053\064\046\065\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\047" +
    "\006\045\016\064\017\060\020\072\024\162\027\207\055" +
    "\055\063\053\064\046\065\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\106\026\103\001\001\000\030" +
    "\005\047\006\045\016\064\017\060\020\072\022\216\024" +
    "\214\055\055\063\053\064\046\065\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\106\026\103\001" +
    "\001\000\032\005\047\006\045\016\064\017\060\020\072" +
    "\023\136\024\135\045\224\055\055\063\053\064\046\065" +
    "\067\001\001\000\006\025\106\026\103\001\001\000\026" +
    "\005\047\006\045\016\064\017\060\020\072\024\227\055" +
    "\055\063\053\064\046\065\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\106\026" +
    "\103\001\001\000\002\001\001\000\010\005\232\006\045" +
    "\055\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\236\030\237\001\001\000\002" +
    "\001\001\000\060\005\242\006\045\007\011\010\014\012" +
    "\006\013\022\014\015\031\005\032\031\033\244\034\033" +
    "\035\025\036\251\037\260\040\257\041\245\042\241\044" +
    "\255\045\243\051\252\053\250\054\016\055\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\274\075\367\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\342" +
    "\006\045\055\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\242" +
    "\006\045\033\244\036\265\037\260\040\257\041\245\042" +
    "\241\044\255\045\243\051\252\053\250\055\256\001\001" +
    "\000\026\005\047\006\045\016\064\017\060\020\072\024" +
    "\263\055\055\063\053\064\046\065\067\001\001\000\002" +
    "\001\001\000\006\025\106\026\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\047" +
    "\006\045\016\064\017\060\020\072\024\270\055\055\063" +
    "\053\064\046\065\067\001\001\000\006\025\106\026\103" +
    "\001\001\000\002\001\001\000\006\030\274\075\273\001" +
    "\001\000\002\001\001\000\056\005\242\006\045\007\011" +
    "\010\014\012\006\013\022\014\015\031\005\032\031\033" +
    "\277\034\033\035\025\040\306\041\300\043\302\045\276" +
    "\053\303\054\016\055\305\066\275\067\310\074\307\001" +
    "\001\000\032\005\242\006\045\033\277\040\306\041\300" +
    "\043\302\045\276\053\303\055\305\066\275\067\340\074" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\047\006\045\016\064\017\060\020\072\024\316\055" +
    "\055\063\053\064\046\065\067\001\001\000\006\025\106" +
    "\026\103\001\001\000\002\001\001\000\006\030\274\075" +
    "\321\001\001\000\010\070\324\071\322\072\325\001\001" +
    "\000\004\073\334\001\001\000\002\001\001\000\006\070" +
    "\324\072\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\047\006\045\016\064\017\060\020\072\024" +
    "\330\055\055\063\053\064\046\065\067\001\001\000\006" +
    "\025\106\026\103\001\001\000\002\001\001\000\006\030" +
    "\274\075\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\274\075\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\047\006\045\016" +
    "\064\017\060\020\072\024\345\055\055\063\053\064\046" +
    "\065\067\001\001\000\006\025\106\026\103\001\001\000" +
    "\002\001\001\000\006\004\350\030\237\001\001\000\010" +
    "\047\351\050\352\052\354\001\001\000\004\046\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\355" +
    "\052\354\001\001\000\002\001\001\000\026\005\047\006" +
    "\045\016\064\017\060\020\072\024\357\055\055\063\053" +
    "\064\046\065\067\001\001\000\006\025\106\026\103\001" +
    "\001\000\002\001\001\000\006\004\362\030\237\001\001" +
    "\000\002\001\001\000\006\004\366\030\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\047\006\045\015" +
    "\372\016\064\017\060\020\072\024\063\055\055\063\053" +
    "\064\046\065\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\047\006\045\016\064\017\060\020\072" +
    "\024\375\055\055\063\053\064\046\065\067\001\001\000" +
    "\006\025\106\026\103\001\001\000\026\005\047\006\045" +
    "\016\064\017\060\020\072\024\377\055\055\063\053\064" +
    "\046\065\067\001\001\000\006\025\106\026\103\001\001" +
    "\000\002\001\001\000\006\004\u0102\030\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\u0107\030\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\u010b" +
    "\012\006\013\022\014\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\041\011\u010e\012\006\013\022" +
    "\014\015\001\001\000\002\001\001\000\014\010\041\011" +
    "\u0110\012\006\013\022\014\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\u0114\012" +
    "\006\013\022\014\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\014\012\006\013" +
    "\022\014\015\032\u0119\061\u0118\062\u011a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\014\012\006\013\022\014\015\032\u0119\062\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\014\012\006" +
    "\013\022\014\015\032\u0119\061\u0122\062\u011a\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u0125\030\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\014\012\006\013\022" +
    "\014\015\032\u0119\061\u012a\062\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\u012d\030\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declaration_list main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= MAIN LBRACE codeblock RBRACE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codeblock ::= declaration_list stat_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codeblock",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identifier ::= accessor DOT identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier ::= accessor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // accessor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // accessor ::= IDENTIFIER LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // accessor ::= IDENTIFIER LBRACK expression_or_null COLON expression_or_null RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // accessor ::= IDENTIFIER LBRACK expression RBRACK LBRACK expression_or_null COLON expression_or_null RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // accessor ::= IDENTIFIER LBRACK expression RBRACK LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // accessor ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // accessor ::= function_call LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // accessor ::= function_call LBRACK expression_or_null COLON expression_or_null RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= dicttype 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= seqtype 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= settype 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subtype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subtype",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // subtype ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subtype",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dicttype ::= DICT LT subtype COMMA subtype GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dicttype",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seqtype ::= SEQ LT subtype GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqtype",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // settype ::= SET LT type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settype",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_list ::= expression COMMA expression_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dictvalue ::= LPAREN dictitems RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictvalue",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dictvalue ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictvalue",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dictitems ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictitems",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dictitems ::= expression COLON expression COMMA dictitems 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictitems",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seqvalue ::= LBRACK seqitems RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqvalue",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // seqvalue ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqvalue",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // seqvalue ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqvalue",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seqitems ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqitems",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // seqitems ::= expression COMMA seqitems 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqitems",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // setvalue ::= LBRACE setitems RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setvalue",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // setvalue ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setvalue",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // setitems ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setitems",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // setitems ::= expression COMMA setitems 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("setitems",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // _lambda_return ::= UNION expression UNION IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_lambda_return",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lambda_return ::= _lambda_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda_return",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lambda_return ::= _lambda_return lambda_return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda_return",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_lambda ::= lambda_return LBRACE return_stat RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_lambda",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_lambda ::= lambda_return expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_lambda",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operator ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operator ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comparator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparator ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comparator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparator ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparator ::= GTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparator ::= DIFFERENCE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparator ::= UNION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparator ::= INTERSECTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression operator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression comparator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression CONCAT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression IN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= dictvalue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= seqvalue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= setvalue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= function_lambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_or_null ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_or_null",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression_or_null ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_or_null",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaration_list ::= declaration_list declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaration_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaration ::= type_declaration SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaration ::= type_declaration EQ expression_list SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaration ::= tdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaration ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaration ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaration ::= thread 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // type_declaration ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tdef ::= TDEF IDENTIFIER LBRACE params RBRACE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tdef",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // alias ::= ALIAS type type SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // thread ::= THREAD IDENTIFIER EQ LBRACE codeblock RBRACE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("thread",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stat_list ::= stat stat_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stat_list ::= stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stat ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stat ::= if_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stat ::= while_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stat ::= forall_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stat ::= read 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stat ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stat ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stat ::= return_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stat ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assignment ::= identifier EQ expression_list SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // print ::= PRINT expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // read ::= READ identifier SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // loop ::= LOOP codeblock_with_break POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // break ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // break ::= BREAK NUMBER SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // return_stat ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stat",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // return_stat ::= RETURN expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stat",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if_stat ::= IF LPAREN expression RPAREN THEN codeblock elif_stat else_stat FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stat",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // elif_block ::= ELIF LPAREN expression RPAREN THEN codeblock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_block",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // _elif_stat ::= elif_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_elif_stat",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // _elif_stat ::= elif_block _elif_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_elif_stat",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // elif_stat ::= _elif_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stat",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // elif_stat ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stat",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // else_stat ::= ELSE codeblock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stat",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // else_stat ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stat",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // while_stat ::= WHILE LPAREN expression RPAREN DO codeblock_with_break OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stat",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // forall_stat ::= FORALL LPAREN expression IN expression RPAREN DO codeblock OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forall_stat",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // codeblock_with_break ::= declaration_list stat_list_with_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codeblock_with_break",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // stat_list_with_break ::= stat_with_break stat_list_with_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_list_with_break",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // stat_list_with_break ::= stat_with_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_list_with_break",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // stat_with_break ::= while_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_with_break",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // stat_with_break ::= break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_with_break",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // stat_with_break ::= if_stat_with_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_with_break",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stat_with_break ::= read 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_with_break",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // stat_with_break ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_with_break",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // stat_with_break ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_with_break",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stat_with_break ::= return_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_with_break",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stat_with_break ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat_with_break",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // elif_block_break ::= ELIF LPAREN expression RPAREN THEN codeblock_with_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_block_break",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // _elif_stat_break ::= elif_block_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_elif_stat_break",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // _elif_stat_break ::= elif_block_break _elif_stat_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_elif_stat_break",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // elif_stat_break ::= _elif_stat_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stat_break",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // elif_stat_break ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stat_break",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // else_stat_break ::= ELSE codeblock_with_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stat_break",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // else_stat_break ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stat_break",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // if_stat_with_break ::= IF LPAREN expression RPAREN THEN codeblock_with_break elif_stat_break else_stat_break FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stat_with_break",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // _params ::= type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_params",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // _params ::= type_declaration COMMA _params 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_params",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // params ::= _params 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // params ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // _args ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_args",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // _args ::= expression COMMA _args 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("_args",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // args ::= _args 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // args ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // function_call ::= IDENTIFIER LPAREN args RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // function ::= FDEF type IDENTIFIER LPAREN params RPAREN LBRACE codeblock RBRACE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // function ::= FDEF IDENTIFIER LPAREN params RPAREN LBRACE codeblock RBRACE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // return_type ::= COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // return_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
