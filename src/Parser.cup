import java_cup.runtime.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal           SEMI, EQ, EQEQ, PLUS, MINUS, MULT, DIV, IMPLY, XOR, COLON, COMMA, DOT, LT, GT, INTERSECTION, UNION, DIFFERENCE;
terminal           LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK;
terminal           LTEQ, GTEQ, AND, OR, NOT, NOTEQ;
terminal           INTEGER, BOOLEAN, RATIONAL, FLOAT, CHAR, DICT, SEQ, SET, TOP;
terminal           MAIN, IN, READ, PRINT, RETURN, BREAK, CONCAT, TDEF, FDEF, ALIAS, OD, DO, THREAD;
terminal           IF, FI, THEN, ELSE, LOOP, POOL, WHILE, FORALL, ELIF;
terminal           IDENTIFIER, NUMBER, STRING, FUNCTION;

non terminal       program, main, codeblock, identifier, accessor, thread;
non terminal       type, subtype, dicttype, seqtype, settype;
non terminal       expression_list, dictvalue, seqvalue, setvalue, dictitems, seqitems, setitems;
non terminal       expression, operator, comparator, expression_or_null;
non terminal       declaration_list, declaration, type_declaration, assignment, tdef, alias;
non terminal       stat_list, stat, print, read, loop, break, if_stat, return_stat, else_stat, elif_stat, _elif_stat, forall_stat, elif_block, while_stat;
non terminal       function, function_call, return_type, args, _args, params, _params, _lambda_return, lambda_return, function_lambda;
non terminal       stat_with_break, stat_list_with_break, elif_block_break, elif_stat_break, _elif_stat_break, else_stat_break, if_stat_with_break, codeblock_with_break;


/* ------------Precedences----------- */
precedence left OR, PLUS, MINUS;
precedence left AND, MULT, DIV, DIFFERENCE, INTERSECTION, UNION;
precedence left CONCAT;
precedence right IN, XOR;
precedence nonassoc NOT, LT, LTEQ, GT, GTEQ, EQEQ, NOTEQ, EQ;
precedence nonassoc IMPLY;


/* ------------Grammar----------- */
program ::= declaration_list main;

main ::= MAIN LBRACE codeblock RBRACE SEMI;

codeblock ::= declaration_list stat_list;

// Identifier
identifier ::= accessor DOT identifier | accessor;
accessor ::= IDENTIFIER
             | IDENTIFIER LBRACK expression RBRACK
             | IDENTIFIER LBRACK expression_or_null COLON expression_or_null RBRACK
             | IDENTIFIER LBRACK expression RBRACK LBRACK expression_or_null COLON expression_or_null RBRACK
             | IDENTIFIER LBRACK expression RBRACK LBRACK expression RBRACK
             | function_call
             | function_call LBRACK expression RBRACK
             | function_call LBRACK expression_or_null COLON expression_or_null RBRACK
             ;

// Types
type ::= dicttype | seqtype | settype | CHAR | INTEGER | RATIONAL | FLOAT | IDENTIFIER | FUNCTION;
subtype ::= type | TOP;
dicttype ::= DICT LT subtype COMMA subtype GT;
seqtype ::= SEQ LT subtype GT;
settype ::= SET LT type GT;

// Values
expression_list ::= expression | expression COMMA expression_list;

dictvalue ::= LPAREN dictitems RPAREN | LPAREN RPAREN;
dictitems ::= expression COLON expression
            | expression COLON expression COMMA dictitems;

seqvalue ::= LBRACK seqitems RBRACK
           | LBRACK RBRACK
           | STRING;
seqitems ::= expression | expression COMMA seqitems;

setvalue ::= LBRACE setitems RBRACE | LBRACE RBRACE;
setitems ::= expression | expression COMMA setitems;

_lambda_return ::= UNION expression UNION IMPLY;
lambda_return ::= _lambda_return | _lambda_return lambda_return;
function_lambda ::= lambda_return LBRACE return_stat RBRACE
                  | lambda_return expression;

// Expression
operator ::= PLUS | MINUS | MULT | DIV | XOR;
comparator ::= AND | OR | EQEQ | IMPLY | LT | GT | LTEQ | GTEQ | NOTEQ | DIFFERENCE | UNION | INTERSECTION;

expression ::= expression operator expression
             | expression comparator expression
             | expression CONCAT expression
             | expression IN expression
             | NOT expression
             | LPAREN expression RPAREN
             | dictvalue
             | seqvalue
             | setvalue
             | function_lambda
             | BOOLEAN
             | MINUS expression
             | NUMBER
             | CHAR
             | identifier
             | EQEQ
             ;

expression_or_null ::= expression |;

// declarations
declaration_list ::= declaration_list declaration|;
declaration ::= type_declaration SEMI
              | type_declaration EQ expression_list SEMI
              | tdef
              | alias
              | function
              | thread
              ;

type_declaration ::= type IDENTIFIER;

tdef ::= TDEF IDENTIFIER LBRACE params RBRACE SEMI;
alias ::= ALIAS type type SEMI;
thread ::= THREAD IDENTIFIER EQ LBRACE codeblock RBRACE SEMI;

// statements
stat_list ::= stat stat_list | stat;

stat ::= loop
            | if_stat
            | while_stat
            | forall_stat
            | read
            | print
            | assignment
            | return_stat
            | function_call SEMI
            ;

assignment ::= identifier EQ expression_list SEMI;

print ::= PRINT expression SEMI;
read ::= READ identifier SEMI;
loop ::= LOOP codeblock_with_break POOL;
break ::= BREAK SEMI | BREAK NUMBER SEMI;
return_stat ::= RETURN SEMI | RETURN expression SEMI;
if_stat ::= IF LPAREN expression RPAREN THEN codeblock elif_stat else_stat FI;
elif_block ::= ELIF LPAREN expression RPAREN THEN codeblock;
_elif_stat ::= elif_block | elif_block _elif_stat;
elif_stat ::= _elif_stat |;
else_stat ::= ELSE codeblock |;
while_stat ::= WHILE LPAREN expression RPAREN DO codeblock_with_break OD;
forall_stat ::= FORALL LPAREN expression IN expression RPAREN DO codeblock OD;

codeblock_with_break ::= declaration_list stat_list_with_break;
stat_list_with_break ::= stat_with_break stat_list_with_break | stat_with_break;

stat_with_break ::= while_stat
            | break
            | if_stat_with_break
            | read
            | print
            | assignment
            | return_stat
            | function_call SEMI
            ;

elif_block_break ::= ELIF LPAREN expression RPAREN THEN codeblock_with_break;
_elif_stat_break ::= elif_block_break | elif_block_break _elif_stat_break;
elif_stat_break ::= _elif_stat_break |;
else_stat_break ::= ELSE codeblock_with_break |;
if_stat_with_break ::= IF LPAREN expression RPAREN THEN codeblock_with_break elif_stat_break else_stat_break FI;


// Functions
_params ::= type_declaration | type_declaration COMMA _params;
params ::= _params |;

_args ::= expression | expression COMMA _args;
args ::= _args |;

function_call ::= IDENTIFIER LPAREN args RPAREN;

function ::= FDEF type IDENTIFIER LPAREN params RPAREN LBRACE codeblock RBRACE SEMI
            | FDEF IDENTIFIER LPAREN params RPAREN LBRACE codeblock RBRACE SEMI;

return_type ::= COLON type |;